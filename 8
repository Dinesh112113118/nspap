import React, { useState, useCallback } from 'react';
import { MapContainer, TileLayer, CircleMarker, Popup, useMapEvents } from 'react-leaflet';
import { LatLng, LatLngExpression } from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { generateTelemetryForCoordinates } from '../services/mockData';
import type { LiveTelemetryData } from '../types';

const Card: React.FC<{ children: React.ReactNode; className?: string, isPadded?: boolean }> = ({ children, className, isPadded = true }) => (
    <div className={`bg-gray-900/60 backdrop-blur-sm border border-gray-700/50 rounded-2xl ${isPadded ? 'p-6' : ''} ${className}`}>
        {children}
    </div>
);

const aqiToColor = (aqi: number): string => {
    if (aqi <= 50) return '#22c55e'; // Green
    if (aqi <= 100) return '#facc15'; // Yellow
    if (aqi <= 150) return '#fb923c'; // Orange
    if (aqi <= 200) return '#ef4444'; // Red
    if (aqi <= 300) return '#a855f7'; // Purple
    return '#be123c'; // Maroon
};

const TelemetryItem: React.FC<{label: string; value: string | number; unit?: string;}> = ({label, value, unit}) => (
    <div className="flex justify-between items-baseline p-2 bg-gray-800/50 rounded-md">
        <span className="text-gray-400 text-sm">{label}</span>
        <span className="font-mono text-white">{value} <span className="text-gray-500 text-xs">{unit}</span></span>
    </div>
)

const LiveTelemetryPanel: React.FC<{ data: LiveTelemetryData | null }> = ({ data }) => (
    <Card>
        <h2 className="text-lg font-semibold text-white mb-4">Live Telemetry</h2>
        {data ? (
            <div className="space-y-2">
                 <div className="text-center bg-gray-800/50 rounded-lg py-3 mb-3">
                    <p className="text-sm text-gray-400">Region AQI</p>
                    <p className="text-5xl font-bold" style={{ color: aqiToColor(data.aqi) }}>{data.aqi}</p>
                </div>
                <div className="space-y-1.5">
                    <TelemetryItem label="Oxygen (O₂)" value={data.o2.toFixed(2)} unit="%" />
                    <TelemetryItem label="Carbon Monoxide (CO)" value={data.co.toFixed(1)} unit="ppb" />
                    <TelemetryItem label="Sulfur Dioxide (SO₂)" value={data.so2.toFixed(2)} unit="ppb" />
                    <TelemetryItem label="Nitrogen Dioxide (NO₂)" value={data.no2.toFixed(1)} unit="ppb" />
                    <TelemetryItem label="Particulates (PM₂.₅)" value={data.pm25.toFixed(1)} unit="µg/m³" />
                </div>
            </div>
        ) : (
            <div className="text-center text-gray-500 h-full flex flex-col justify-center items-center py-10">
                 <svg className="w-12 h-12 mb-2 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" /><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" /></svg>
                <p>No Region Selected.</p>
                <p className="text-xs mt-1">Click anywhere on the map to analyze.</p>
            </div>
        )}
         <p className="text-xs text-gray-600 mt-4 text-center">Source: Fused Global Sensor Network (Simulated)</p>
    </Card>
);

const dummyLocations = [
  { name: 'New York', coords: [40.7128, -74.0060] as LatLngExpression, value: 120 },
  { name: 'Los Angeles', coords: [34.0522, -118.2437] as LatLngExpression, value: 155 },
  { name: 'Chicago', coords: [41.8781, -87.6298] as LatLngExpression, value: 90 },
  { name: 'Denver', coords: [39.7392, -104.9903] as LatLngExpression, value: 45 },
  { name: 'Seattle', coords: [47.6062, -122.3321] as LatLngExpression, value: 30 },
  { name: 'Houston', coords: [29.7604, -95.3698] as LatLngExpression, value: 135 },
  { name: 'Phoenix', coords: [33.4484, -112.0740] as LatLngExpression, value: 180 },
];

const MapEvents = ({ onMapClick }: { onMapClick: (latlng: LatLng) => void }) => {
    useMapEvents({
        click(e) {
            onMapClick(e.latlng);
        },
    });
    return null;
};

const MapView: React.FC = () => {
    const [selectedPosition, setSelectedPosition] = useState<LatLng | null>(null);
    const [liveData, setLiveData] = useState<LiveTelemetryData | null>(null);
    const center: LatLngExpression = [39.8283, -98.5795];

    const handleMapClick = useCallback((latlng: LatLng) => {
        setSelectedPosition(latlng);
        const telemetry = generateTelemetryForCoordinates(latlng);
        setLiveData(telemetry);
    }, []);


    return (
        <div className="space-y-6">
            <h1 className="text-3xl font-bold text-white">Geospatial Analysis</h1>
            <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
                <div className="lg:col-span-3">
                    <div className="relative bg-gray-900/60 border border-gray-700/50 rounded-2xl overflow-hidden aspect-[1000/600] cursor-crosshair">
                        <MapContainer center={center} zoom={4} scrollWheelZoom={true} style={{ height: '100%', width: '100%', backgroundColor: '#f0f0f0' }}>
                            <TileLayer
                                attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
                                url="https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png"
                            />
                            <MapEvents onMapClick={handleMapClick} />
                            
                            {dummyLocations.map(loc => (
                                 <CircleMarker
                                    key={loc.name}
                                    center={loc.coords}
                                    radius={8}
                                    pathOptions={{ 
                                        color: aqiToColor(loc.value),
                                        fillColor: aqiToColor(loc.value),
                                        fillOpacity: 0.6,
                                        weight: 1.5,
                                    }}
                                >
                                    <Popup>
                                        <div className="text-sm">
                                            <p className="font-bold text-base text-gray-900 mb-1">{loc.name}</p>
                                            <p>Simulated AQI: <span className="font-bold" style={{color: aqiToColor(loc.value)}}>{loc.value}</span></p>
                                        </div>
                                    </Popup>
                                </CircleMarker>
                            ))}

                            {selectedPosition && (
                                <CircleMarker
                                    center={selectedPosition}
                                    radius={10}
                                    pathOptions={{ color: '#3b82f6', fillColor: '#3b82f6', fillOpacity: 0.4, weight: 2 }}
                                />
                            )}
                        </MapContainer>
                    </div>
                </div>
                
                <div className="lg:col-span-1">
                    <LiveTelemetryPanel data={liveData} />
                </div>
            </div>
        </div>
    );
};

export default MapView;
